% %%%%%%%%%%%%%%%%%%%%%%%%
% Sparse Reduced K-means % 
%                        %
%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  Maurizio Vichi September 2013
%
% X (n X J) data matrix
% A (J x Q) loading matrix for dimensionality reduction
% U (n x k) membership matrix for clustering objects
%
% model X = UYmA' + E
% 
% problem: min||X-UYmA'||^2
% 
% being ||X||^2 = ||X-UYmA'||^2 + ||UYmA'||^2
%
% equivalent problem
%
% problem maximize ||UYmA'||^2
% subject to
%
% U binary and row stochastic
% A Orthonormal A'A=IJ
%
function [Urkm,Arkm, Yrkm,frkm,inrkm]=SREDKM(X, K, Q, Stop,Rndstart)


%
% initialization
%
maxiter=100;
% convergence tollerance
eps=0.000000000000001;

opts.disp=0;
VC=eye(Q);

[n,J]=size(X);

% centring matrix
Jm=eye(n)-(1/n)*ones(n);

% compute var-covar matrix 
S=(1/n)*X'*Jm*X;

% Standardize data
Xs=Jm*X*diag(diag(S))^-0.5;




un=ones(n,1);
uk=ones(K,1);
um=ones(Q,1);


for loop=1:Rndstart
    U=randPU(n,K);
    su=sum(U);
    Xmean = diag(1./su)*U'*Xs;
    it=0;
    % update A
     XX=Xs'*U*diag(1./su)*U'*Xs;
     XX=(1/n)*XX;

%    [A,L]=eig(XX);
%    [dL,idL]=sort(diag(L), 'descend');
%    L=diag(dL);
%    A=A(:,idL);
%    %Q=find(diag(L)>=1);
%    A=A(:,1:Q);
    [A] = spca([], XX, Q,inf, Stop, 3000, 1e-18);
    Ymean = Xmean*A;
    Y=Xs*A;
    st=(1/n)*sum(sum(Y.^2));
    f0=trace((1./n)*Ymean'*U'*U*Ymean)/st;
% iteration phase
    for it=1:maxiter,
      % given Ymean update U
        U=zeros(n,K);
        for i=1:n
            mindif=sum((Y(i,:)-Ymean(1,:)).^2);
            posmin=1;
            for j=2:K
                dif=sum((Y(i,:)-Ymean(j,:)).^2);
                if dif < mindif
                    mindif=dif;
                    posmin=j;
                end 
            end
            U(i,posmin)=1;
        end
     %
        su=sum(U);
        while sum(su==0)>0,
            [~,p1]=min(su);
            [~,p2]=max(su);
            ind=find(U(:,p2));
            ind=ind(1:floor(su(p2)/2));
            U(ind,p1)=1;
            U(ind,p2)=0;
            su=sum(U);
        end 

        % given U compute Xmean (compute centroids)
        Xmean = diag(1./su)*U'*Xs;
      
        % given U and Xmean update A
        XX=Xs'*U*diag(1./su)*U'*Xs;
        XX=(1/n)*XX;
        %[A,L]=eig(XX);
        %[dL,idL]=sort(diag(L), 'descend');
        %L=diag(dL);
        %A=A(:,idL);
        %Q=find(diag(L)>=1);
        %A=A(:,1:Q);
        [A] = spca([], XX, Q,inf, Stop, 3000, 1e-25);
        Ymean = Xmean*A;
        Y=Xs*A;
        st=(1/n)*sum(sum(Y.^2));
        f=trace((1./n)*Ymean'*U'*U*Ymean)/st;
        fdif = f-f0;
        
        if fdif > eps 
            f0=f; A0=A; 
        else
            break
        end
    end
  st=(1/n)*sum(sum(Y.^2));
  disp(sprintf('SREDKM: Loop=%g, Explained variance=%g, iter=%g, fdif=%g',loop,f/st*100, it,fdif))   
       if loop==1
            Urkm=U;
            Arkm=A;
            Yrkm=Xs*Arkm;
            frkm=f;
            looprkm=1;
            inrkm=it;
            fdifo=fdif;
        end
   if f > frkm
       Urkm=U;
       frkm=f;
       Arkm=A;
       Yrkm=Xs*Arkm;
       looprkm=loop;
       inrkm=it;
       fdifo=fdif;
   end
end
% sort components in descend order of variance
% and ritate factors
varYrkm=var(Yrkm,1);
[~,ic]=sort(varYrkm, 'descend');
Arkm=Arkm(:,ic);
Yrkm=Yrkm(:,ic); 
%Arkm=rotatefactors(Arkm);
% sort clusters of objects in descending order of cardinality
%dwc=zeros(K,1);
%for k=1:K
%dwc(k)= trace((Yrkm-Urkm*pinv(Urkm)*Yrkm)'*diag(Urkm(:,k))*(Yrkm-Urkm*pinv(Urkm)*Yrkm));
%end
[~,ic]=sort(diag(Urkm'*Urkm), 'descend');
Urkm=Urkm(:,ic);
st=(1/n)*sum(sum(Yrkm.^2));
disp(sprintf('REDKM (Final): Percentage Explained variance=%g, looprkm=%g, iter=%g, fdif=%g',frkm/st*100, looprkm, inrkm,fdifo))

 